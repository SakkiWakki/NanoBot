# env
import os
import random
import string
from dotenv import load_dotenv
from requests.models import PreparedRequest
import discord
from discord.ext import commands

# Environment set-up
load_dotenv()
oidc_token_endpoint = os.getenv("OIDC_AUTH_ENDPOINT")
client_id = os.getenv("CLIENT_ID")
redirect_uri = os.getenv("REDIRECT_URI")


class Auth(commands.Cog):
    """
    Purely for the authentication bot
    """
    def __init__(
        self, bot
    ):  # this is a special method that is called when the cog is loaded
        self.bot = bot

    @discord.slash_command(
        name="verify", description="Get a link to be verified as an MIT student!"
    )
    async def verify(self, ctx):
        """
        Generates a verification URL for the user

        What the data in request params mean
        ================================================
        client_id: the identifier of your client
        response_type: must be the value code for this type of client (other clients have different code types)
        scope: a space-separated list of values that describe what parts of the user's profile your application is
            asking for access to; must include the value openid to receive an ID token, and offline_access to receive
            a refresh token
        redirect_uri: the URI that the server will return the user to upon authorization of your client;
            this URI must be capable of receiving requests from the user's system, and your client must
            be able to read query parameters from it; this value must be registered at the server
        state: a random, unguessable value generated by the client
        nonce: a random, unguessable value generated by the client
        """

        def random_string(length):
            letters = string.ascii_letters
            return "".join(random.choice(letters) for i in range(length))

        state = random_string(6)
        nonce = random_string(6)

        authorization_endpoint = oidc_token_endpoint

        request_params = {
            "client_id": client_id,
            "response_type": "code",
            "scope": "openid",
            "redirect_uri": redirect_uri,
            "state": state,
            "nonce": nonce,
        }

        verify_url = PreparedRequest()
        verify_url.prepare_url(authorization_endpoint, request_params)

        embed = discord.Embed()
        embed.description = (
            f"Use [this link]({verify_url.url}) for verification! Please do not share the link with anyone else"
        )
        await ctx.respond(embed=embed, ephemeral=True)


def setup(bot):
    bot.add_cog(Auth(bot))
